
def compile(protocol,
            ppargs,
            execargs,
            simplify_hints,
            size_map,
            set_parameters,
            filename=None):
  name = protocol.__class__.__name__
  csname = protocol.name
  n = get_minimal_vector_size(protocol, ppargs, execargs, simplify_hints)
  set_parameters()

  debug("Start analyzing %s..." % name)
  piop = PIOPFromVOProtocol(protocol, n, D)
  piop.debug_mode = debug_mode
  piop.debug_check_hadamard_side = debug_check_hadamard_side
  debug("Start preprocessing...")
  piopexec = PIOPExecution()

  piop.preprocess(piopexec, *ppargs)
  piopexec.reference_to_voexec._simplify_max_hints = simplify_hints
  debug("Start executing...")
  piop.execute(piopexec, *execargs)
  piopexec.max_degree = piopexec.reference_to_voexec.simplify_max(
      piopexec.max_degree)

  size_init = rust(piopexec.max_degree)
  for size, value in size_map:
    size_init = size_init.replace(rust(size), "(size.{} as i64)".format(value))

  debug("Start compiling to zkSNARK...")
  zkSNARK = ZKSNARKFromPIOPExecKZG(piopexec)
  debug()
  dump_performance(piopexec, zkSNARK, name)

  if filename is not None:
    with open("../voproof/src/snarks/template.rs") as template:
      temp = template.readlines()
    mark_content_map = [("__NAME__", name),
                        ("__CSNAME__", csname),
                        ("/*{size}*/",
                         "(%s) as usize" % size_init),
                        ("/*{VerifierKey}*/", zkSNARK.dump_vk_definition()),
                        ("/*{index verifier key}*/",
                         zkSNARK.dump_vk_construction()),
                        ("/*{ProverKey}*/", zkSNARK.dump_pk_definition()),
                        ("/*{Proof}*/", zkSNARK.dump_proof_definition()),
                        ("/*{index prover key}*/",
                         zkSNARK.dump_pk_construction()),
                        ("/*{proof}*/", zkSNARK.dump_proof_construction()),
                        ("/*{index}*/", zkSNARK.dump_indexer_rust()),
                        ("/*{prove}*/", zkSNARK.dump_prover_rust()),
                        ("/*{verify}*/", zkSNARK.dump_verifier_rust()),
                        ]

    for i in range(len(temp)):
      for mark, content in mark_content_map:
        if mark in temp[i]:
          temp[i] = temp[i].replace(mark, content)
    temp = "".join(temp)

    with open("../voproof/src/snarks/%s.rs" % filename, "w") as f:
      print("///! This file is generated by "
            "https://github.com/yczhangsjtu/voproof-scripts/%s"
            % basename(__file__), file=f)
      print(temp, file=f)

  reset_name_counters()